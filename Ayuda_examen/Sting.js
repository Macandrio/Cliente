// âœ… CÃ³mo crear strings ("texto", 'texto', `texto`).
// âœ… BÃºsqueda (indexOf(), includes(), startsWith(), endsWith()).
// âœ… ExtracciÃ³n (slice(), substring(), substr()).
// âœ… ModificaciÃ³n (toUpperCase(), toLowerCase(), replace(), trim()).
// âœ… DivisiÃ³n y repeticiÃ³n (split(), repeat()).
// âœ… Acceso a caracteres (charAt(), at(), []).
// âœ… ComparaciÃ³n (localeCompare(), normalize()).
// âœ… Template literals y regex con strings.


// ==========================
// ðŸ”¹ 1. CREAR CADENAS (STRING)
// ==========================

// ðŸ”¹ Usando comillas dobles o simples
console.log("// Crear strings con comillas");
let str1 = "Hola, mundo!";
let str2 = 'Hola, JavaScript!';
console.log(str1);
console.log(str2);

// ðŸ”¹ Usando template literals (comillas invertidas ` `)
console.log("// Template literals: Permite insertar variables y saltos de lÃ­nea");
let nombre = "Carlos";
let saludo = `Hola, ${nombre}! Â¿CÃ³mo estÃ¡s?`;
console.log(saludo);

// ðŸ”¹ Longitud de un string
console.log("// .length: Longitud del string");
console.log(str1.length); // 12

// ==========================
// ðŸ”¹ 2. MÃ‰TODOS DE BÃšSQUEDA EN STRING
// ==========================

// ðŸ”¹ indexOf() â†’ Devuelve la posiciÃ³n de la primera apariciÃ³n de un texto
console.log("// indexOf(): PosiciÃ³n de un texto");
console.log("JavaScript es genial".indexOf("genial")); // 13

// ðŸ”¹ lastIndexOf() â†’ Devuelve la Ãºltima apariciÃ³n de un texto
console.log("// lastIndexOf(): Ãšltima posiciÃ³n de un texto");
console.log("banana".lastIndexOf("a")); // 5

// ðŸ”¹ includes() â†’ Devuelve true si el texto estÃ¡ en la cadena
console.log("// includes(): Verifica si un string contiene un texto");
console.log("Me gusta JavaScript".includes("JavaScript")); // true

// ðŸ”¹ startsWith() â†’ Verifica si empieza con determinado texto
console.log("// startsWith(): Verifica si comienza con un texto");
console.log("Hola, mundo!".startsWith("Hola")); // true

// ðŸ”¹ endsWith() â†’ Verifica si termina con determinado texto
console.log("// endsWith(): Verifica si termina con un texto");
console.log("Hola, mundo!".endsWith("mundo!")); // true

// ==========================
// ðŸ”¹ 3. MÃ‰TODOS DE EXTRACCIÃ“N
// ==========================

// ðŸ”¹ slice(inicio, fin) â†’ Extrae una parte del string
console.log("// slice(): Extrae parte de un string");
console.log("JavaScript".slice(0, 4)); // "Java"

// ðŸ”¹ substring(inicio, fin) â†’ Similar a slice pero sin valores negativos
console.log("// substring(): Extrae parte de un string (sin negativos)");
console.log("JavaScript".substring(0, 4)); // "Java"

// ðŸ”¹ substr(inicio, cantidad) â†’ Extrae una cantidad de caracteres (OBSOLETO)
console.log("// substr(): Extrae cierta cantidad de caracteres");
console.log("JavaScript".substr(4, 6)); // "Script"

// ==========================
// ðŸ”¹ 4. MÃ‰TODOS DE MODIFICACIÃ“N
// ==========================

// ðŸ”¹ toUpperCase() â†’ Convierte a mayÃºsculas
console.log("// toUpperCase(): Convierte a mayÃºsculas");
console.log("hola".toUpperCase()); // "HOLA"

// ðŸ”¹ toLowerCase() â†’ Convierte a minÃºsculas
console.log("// toLowerCase(): Convierte a minÃºsculas");
console.log("HOLA".toLowerCase()); // "hola"

// ðŸ”¹ replace(texto, nuevoTexto) â†’ Reemplaza un texto por otro
console.log("// replace(): Reemplaza un texto");
console.log("Hola, mundo!".replace("mundo", "JavaScript")); // "Hola, JavaScript!"

// ðŸ”¹ trim() â†’ Elimina espacios en blanco al inicio y al final
console.log("// trim(): Elimina espacios en blanco");
console.log("   Hola   ".trim()); // "Hola"

// ðŸ”¹ trimStart() â†’ Elimina espacios al inicio
console.log("// trimStart(): Elimina espacios al inicio");
console.log("   Hola   ".trimStart()); // "Hola   "

// ðŸ”¹ trimEnd() â†’ Elimina espacios al final
console.log("// trimEnd(): Elimina espacios al final");
console.log("   Hola   ".trimEnd()); // "   Hola"

// ==========================
// ðŸ”¹ 5. MÃ‰TODOS DE DIVISIÃ“N Y REPETICIÃ“N
// ==========================

// ðŸ”¹ split(separador) â†’ Divide un string en un array
console.log("// split(): Divide un string en un array");
console.log("manzana,pera,plÃ¡tano".split(",")); // ["manzana", "pera", "plÃ¡tano"]

// ðŸ”¹ repeat(n) â†’ Repite el string n veces
console.log("// repeat(): Repite el string");
console.log("Hola! ".repeat(3)); // "Hola! Hola! Hola! "

// ==========================
// ðŸ”¹ 6. ACCESO Y MANIPULACIÃ“N DE CARACTERES
// ==========================

// ðŸ”¹ charAt(posiciÃ³n) â†’ Devuelve el carÃ¡cter en la posiciÃ³n dada
console.log("// charAt(): Obtiene el carÃ¡cter en una posiciÃ³n");
console.log("JavaScript".charAt(4)); // "S"

// ðŸ”¹ charCodeAt(posiciÃ³n) â†’ Devuelve el cÃ³digo Unicode del carÃ¡cter
console.log("// charCodeAt(): CÃ³digo Unicode del carÃ¡cter");
console.log("A".charCodeAt(0)); // 65

// ðŸ”¹ at(posiciÃ³n) â†’ Alternativa moderna a charAt()
console.log("// at(): Obtiene el carÃ¡cter (soporta Ã­ndices negativos)");
console.log("JavaScript".at(-1)); // "t"

// ðŸ”¹ Acceder a un carÃ¡cter usando corchetes []
console.log("// Acceder a un carÃ¡cter con corchetes []");
console.log("JavaScript"[4]); // "S"

// ==========================
// ðŸ”¹ 7. MÃ‰TODOS AVANZADOS
// ==========================

// ðŸ”¹ localeCompare() â†’ Compara dos cadenas alfabÃ©ticamente
console.log("// localeCompare(): Compara dos strings");
console.log("apple".localeCompare("banana")); // -1 (apple < banana)
console.log("banana".localeCompare("apple")); // 1  (banana > apple)
console.log("apple".localeCompare("apple")); // 0  (son iguales)

// ðŸ”¹ normalize() â†’ Normaliza caracteres acentuados a su forma base
console.log("// normalize(): Normaliza caracteres acentuados");
console.log("Ã¡Ã©Ã­Ã³Ãº".normalize("NFD").replace(/\p{Diacritic}/gu, "")); // "aeiou"

// ==========================
// ðŸ”¹ 8. INTERPOLACIÃ“N DE STRINGS CON TEMPLATE LITERALS
// ==========================

console.log("// Template literals con variables y expresiones");
let edad = 25;
console.log(`Mi nombre es ${nombre} y tengo ${edad} aÃ±os.`);

// ðŸ”¹ Soporte para mÃºltiples lÃ­neas
console.log("// Template literals con mÃºltiples lÃ­neas");
let mensaje = `Hola,
Esto es un mensaje
con varias lÃ­neas.`;
console.log(mensaje);

// ==========================
// ðŸ”¹ 9. VALIDACIONES CON REGEX Y STRINGS
// ==========================

// ðŸ”¹ match() â†’ Devuelve todas las coincidencias de un patrÃ³n
console.log("// match(): Buscar todas las coincidencias");
console.log("Hola 123 hola 456".match(/\d+/g)); // ["123", "456"]

// ðŸ”¹ search() â†’ Devuelve la posiciÃ³n de la primera coincidencia
console.log("// search(): Buscar la primera coincidencia");
console.log("Hola mundo".search(/mundo/)); // 5

// ðŸ”¹ replace() con regex â†’ Reemplazo avanzado
console.log("// replace() con regex");
console.log("123-456-789".replace(/\d/g, "X")); // "XXX-XXX-XXX"
